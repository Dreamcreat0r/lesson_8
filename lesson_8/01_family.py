# -*- coding: utf-8 -*-

from termcolor import cprint
from random import randint

######################################################## Часть первая
#
# Создать модель жизни небольшой семьи.
#
# Каждый день участники жизни могут делать только одно действие.
# Все вместе они должны прожить год и не умереть.
#
# Муж может:
#   есть,
#   играть в WoT,
#   ходить на работу,
# Жена может:
#   есть,
#   покупать продукты,
#   покупать шубу,
#   убираться в доме,

# Все они живут в одном доме, дом характеризуется:
#   кол-во денег в тумбочке (в начале - 100)
#   кол-во еды в холодильнике (в начале - 50)
#   кол-во грязи (в начале - 0)
#
# У людей есть имя, степень сытости (в начале - 30) и степень счастья (в начале - 100).
#
# Любое действие, кроме "есть", приводит к уменьшению степени сытости на 10 пунктов
# Кушают взрослые максимум по 30 единиц еды, степень сытости растет на 1 пункт за 1 пункт еды.
# Степень сытости не должна падать ниже 0, иначе чел умрет от голода.
#
# Деньги в тумбочку добавляет муж, после работы - 150 единиц за раз.
# Еда стоит 10 денег 10 единиц еды. Шуба стоит 350 единиц.
#
# Грязь добавляется каждый день по 5 пунктов, за одну уборку жена может убирать до 100 единиц грязи.
# Если в доме грязи больше 90 - у людей падает степень счастья каждый день на 10 пунктов,
# Степень счастья растет: у мужа от игры в WoT (на 20), у жены от покупки шубы (на 60, но шуба дорогая)
# Степень счастья не должна падать ниже 10, иначе чел умрает от депресии.
#
# Подвести итоги жизни за год: сколько было заработано денег, сколько сьедено еды, сколько куплено шуб.


class House:

    def __init__(self):
        self.food = 50 # начальная еда в холодильнике
        self.money = 100 # начальные деньги
        self.dirt = 0 # начальная загрязненность дома

    def __str__(self): # выводим информацию о доме
        print('{} еды в холодильнике, {} денег в тумбочке, {} степень загрязненности дома\n'.format(self.food, self.money, self.dirt))

    def act(self):
        self.dirt += 5
        self.__str__()


class Human:

    def __init__(self, name, house):
        self.satiety = 30 # начальная сытость
        self.happiness = 100 # начальное счастье
        self.house = house
        self.name = name

    def __str__(self):
        print('{}:     {} сытость,     {} счастье'.format(self.name, self.satiety, self.happiness)) # вывод статов конкретного чела

    def act(self):
        self.__str__()
        self.satiety -= 10     # снимаем сытость за каждый ход
    
        if self.satiety <= 0:    # проверка на смерть от голода
            return 'Death'

        if self.happiness < 10:    # проверка на смерть от депрессии
            return 'Death'

        if self.satiety <= 10:    # проверяем себя на голод
            if self.eat() == 'done':
                print(self.name, ', покушал(а)\n') # сообщение о совершенном действии
                return   # съедаем очко действия

        if self.house.dirt >= 90:   # если дом грязный - настроение падает
            self.happiness -= 10


    def eat(self):
        if self.house.food >= 30: # если есть покушать досыта
            self.house.food -= 40
            self.satiety += 40
            return 'done'
        elif self.house.food > 0: # если есть покушать частично
            self.satiety += self.house.food
            self.house.food = 0
            return 'done'
        else: # если еды нет совсем
            print('Еды нет!')   # сигналим если еды нет


class Husband(Human):

    def __init__(self, name, house):
        super().__init__(name=name, house=house)

    def __str__(self):   # сообщение о характеристиках - ссылаемся на метод материнского класса
        super().__str__()

    def act(self):   # дополняем движковый модуль материнского класса
        super().act()
        if self.happiness <  20:   # если накатил депрессон от того, что жена не убирается в доме - поиграем в танки
            self.play()
            print(self.name, ' поиграл\n') # сообщение о совершенном действии
            return # съедаем очко действия
        
        self.work()   # если очко действия еще не потрачено на покушац или на поигр...то есть, на восстановление морали, то идем на работу
        print(self.name, ' поработал\n') # сообщение о совершенном действии

    def eat(self):    # ссылаемся на модуль материнского класса
        super().eat()

    def work(self):   # никидываем 150 голды в кошелек
        self.house.money += 150

    def play(self):   # +10 морали
        self.happiness += 20
        


class Wife(Human):

    def __init__(self, name, house):
        super().__init__(name=name, house=house)

    def __str__(self):   # сообщение о характеристиках - ссылаемся на метод материнского класса
        super().__str__()

    def act(self):  # дополняем движковый модуль материнского класса
        super().act()
        if self.happiness < 20:   # если накатил депрессон от того, что сама не убирается в доме - купим шубу
            if self.buy_fur_coat() == 'done':   
                print(self.name, ' купила шубу\n') # сообщение о совершенном действии
                return  # съедаем очко действия

        if self.house.food < 60:  # если нечего кушац - идем в магазин
            if self.buy_food() == 'done':
                print(self.name, ' купила еды\n') # сообщение о совершенном действии
                return  # съедаем очко действия

        self.clean_house()    # если очко действия еще не потрачено на покушац/купить шубу/сходить в магазин, то убираемся в доме
        print(self.name, ' убралась в доме\n') # сообщение о совершенном действии

    def eat(self):
        super().eat()

    def buy_food(self):
        if self.house.money > 150:   # проверяем, есть ли деньги на еду (по максимуму)
            self.house.food += 150
            self.house.money -= 150
            print('{} купила 150 еды'.format(self.name))   # отчет о купленной еде
            return 'done'
        elif self.house.money > 0:   # проверяем, есть ли деньги на еду (частично)
            self.house.food += self.house.money
            print('{} купила {} еды'.format(self.name, self.house.money))   # отчет о купленной еде
            self.house.money = 0
            return 'done'
        else:
            print('Денег на еду НЕТ!')   # сигналим, если денег нет вообще
        

    def buy_fur_coat(self):
        if self.house.money >= 450:   # проверяем, достаточно ли денег
            self.house.money = 0
            self.happiness += 60
            print(self.name, ', купила шубу')
            return 'done'
        else:
            print('Нет денег на шубу!')    # сигналим, если нет

    def clean_house(self):
        self.house.dirt = 0


home = House()
serge = Husband(name='Сережа', house = home)
masha = Wife(name='Маша', house = home)

for day in range(365):
    print('================================== День {} =================================='.format(day+1))
    home.act()
    if serge.act() == 'Death':
        break
    if masha.act() == 'Death':
        break
    print('В конце хода: ')
    home.__str__()
    serge.__str__()
    masha.__str__()
    print('\n')














# Можно будет потом преобразовать всю эту ботву в схему через очки приоритета. 
# Типа покушать и восстановить мораль - нулевой приоритет, купить еды если ее нет вообще - первый, 
# убраться в доме если он грязный - второй, купить еды, если ее 100+ - третий и т.д.






# TODO после реализации первой части - отдать на проверку учителю

######################################################## Часть вторая
#
# После подтверждения учителем первой части надо
# отщепить ветку develop и в ней начать добавлять котов в модель семьи
#
# Кот может:
#   есть,
#   спать,
#   драть обои
#
# Люди могут:
#   гладить кота (растет степень счастья на 5 пунктов)
#
# В доме добавляется:
#   еда для кота (в начале - 30)
#
# У кота есть имя и степень сытости (в начале - 30)
# Любое действие кота, кроме "есть", приводит к уменьшению степени сытости на 10 пунктов
# Еда для кота покупается за деньги: за 10 денег 10 еды.
# Кушает кот максимум по 10 единиц еды, степень сытости растет на 2 пункта за 1 пункт еды.
# Степень сытости не должна падать ниже 0, иначе кот умрет от голода.
#
# Если кот дерет обои, то грязи становится больше на 5 пунктов


#class Cat:

#    def __init__(self):
#        pass

#    def act(self):
#        pass

#    def eat(self):
#        pass

#    def sleep(self):
#        pass

#    def soil(self):
#        pass


######################################################## Часть вторая бис
#
# После реализации первой части надо в ветке мастер продолжить работу над семьей - добавить ребенка
#
# Ребенок может:
#   есть,
#   спать,
#
# отличия от взрослых - кушает максимум 10 единиц еды,
# степень счастья  - не меняется, всегда ==100 ;)

#class Child:

#    def __init__(self):
#        pass

#    def __str__(self):
#        return super().__str__()

#    def act(self):
#        pass

#    def eat(self):
#        pass

#    def sleep(self):
#        pass


# TODO после реализации второй части - отдать на проверку учителем две ветки


######################################################## Часть третья
#
# после подтверждения учителем второй части (обоих веток)
# влить в мастер все коммиты из ветки develop и разрешить все конфликты
# отправить на проверку учителем.


#home = House()
#serge = Husband(name='Сережа')
#masha = Wife(name='Маша')
#kolya = Child(name='Коля')
#murzik = Cat(name='Мурзик')

#for day in range(365):
#    cprint('================== День {} =================='.format(day), color='red')
#    serge.act()
#    masha.act()
#    kolya.act()
#    murzik.act()
#    cprint(serge, color='cyan')
#    cprint(masha, color='cyan')
#    cprint(kolya, color='cyan')
#    cprint(murzik, color='cyan')


# Усложненное задание (делать по желанию)
#
# Сделать из семьи любителей котов - пусть котов будет 3, или даже 5-10.
# Коты должны выжить вместе с семьей!
#
# Определить максимальное число котов, которое может прокормить эта семья при значениях зарплаты от 50 до 400.
# Для сглаживание случайностей моделирование за год делать 3 раза, если 2 из 3х выжили - считаем что выжили.
#
# Дополнительно вносить некий хаос в жизнь семьи
# - N раз в год вдруг пропадает половина еды из холодильника (коты?)
# - K раз в год пропадает половина денег из тумбочки (муж? жена? коты?!?!)
# Промоделировать - как часто могут случаться фейлы что бы это не повлияло на жизнь героев?
#   (N от 1 до 5, K от 1 до 5 - нужно вычислит максимумы N и K при котором семья гарантированно выживает)
#
# в итоге должен получится приблизительно такой код экспериментов
# for food_incidents in range(6):
#   for money_incidents in range(6):
#       life = Simulation(money_incidents, food_incidents)
#       for salary in range(50, 401, 50):
#           max_cats = life.experiment(salary)
#           print(f'При зарплате {salary} максимально можно прокормить {max_cats} котов')

